export type Config = LocalConfig | GlobalConfig;

export type LocalConfig<
  TOptions extends NamespacedBasketryOptions = NamespacedBasketryOptions,
> = {
  /** CommonJS module that contains the Parser function */
  parser: string;
  /** Array of CommonJS modules that contain Rule functions */
  rules?: string[];
  /** Array of CommonJS modules that contain Generator functions */
  generators: (string | GeneratorOptions)[];
  /** The source Service Definition used to generate service code */
  source?: string;
  /** The folder in which to output all generated files. */
  output?: string;
  /** Common options passed only to all generators. These common options will be overridden by generator-specific options. */
  options?: TOptions;
};

export interface NamespacedBasketryOptions {
  basketry?: BasketryOptions;
  [x: string | number | symbol]: unknown;
}

export type BasketryOptions = {
  command?: string;
  docs?: string;
  subfolder?: string;
};

export type GlobalConfig = {
  configs: string[];
};

export type Options = {
  /** CommonJS module that contains the Parser function */
  parser: string;
  /** Array of CommonJS modules that contain Rule functions */
  rules: (string | RuleOptions)[];
  /** Array of CommonJS modules that contain Generator functions */
  generators: (string | GeneratorOptions)[];
  sourceName: string;
  sourceContent: string;
};

export type GeneratorOptions = {
  /** CommonJS module that contain a Generator function */
  generator: string;
  /** Options passed only to this generator. These generator-specific options will override common options. */
  options?: any;
};

export type Parser = (
  /** The content of the source SDL as text */
  sourceContent: string,
  /**
   * The path to the source SDL on the file system. This path is used for
   * generating Violations that point to a specific range within the SDL file.
   */
  sourcePath: string,
) => {
  /** The Intermediate Representation (IR) of the source SDL */
  service: Service;
  /**
   * Any violations that are specific to the source SDL. These may include violations
   * that prevented a valid Intermediate Representation (IR) from being generated.
   * General violations (not specific to the SDL) should be generated by {@link Rule Rules} rather than a Parser.
   */
  violations: Violation[];
};

export type RuleOptions = {
  rule: string;
  /** Options passed only to this Rule. */
  options?: any;
};

export type Rule = (
  /** The Intermediate Representation (IR) of the service */
  service: Service,
  /**
   * The path to the source SDL on the file system. This path is used for
   * generating Violations that point to a specific range within the original SDL file.
   */
  sourcePath: string,
  options?: any,
) => Violation[];

export type Generator = (service: Service, options?: any) => File[];

export type FileStatus =
  | 'added'
  | 'modified'
  | 'removed'
  | 'no-change'
  | 'error';

export type Input = {
  sourcePath: string;
  sourceContent: string;
  configPath?: string;
  parser: string;
  rules: (string | RuleOptions)[];
  generators: (string | GeneratorOptions)[];
  validate: boolean;
  output?: string;
  /** Common options passed only to all generators. These common options will be overridden by generator-specific options. */
  options?: any;
};

export type Output = {
  violations: Violation[];
  errors: BasketryError[];
  files: File[];
};

export type CliOutput = {
  violations: Violation[];
  errors: BasketryError[];
  files: Record<string, FileStatus>;
  perf?: PerfEvent[];
};

export type PerfEvent = {
  readonly duration: number;
  readonly name: string;
  readonly startTime: number;
  readonly entryType: string;
  readonly detail?: string | null | undefined;
};

export type Overrides = {
  sourcePath?: string;
  sourceContent?: string;
  parser?: string;
  rules?: (string | RuleOptions)[];
  generators?: (string | GeneratorOptions)[];
  validate?: boolean;
  output?: string;
};

export type BasketryError = {
  code:
    | 'PARSER_ERROR'
    | 'RULE_ERROR'
    | 'GENERATOR_ERROR'
    | 'CONFIG_ERROR'
    | 'SOURCE_ERROR'
    | 'FATAL_ERROR'
    | 'MODULE_ERROR'
    | 'MISSING_PARAMETER'
    | 'WRITE_ERROR';
  message: string;
  filepath?: string;
};

export type File = {
  path: string[];
  contents: string;
};

export type Severity = 'info' | 'warning' | 'error';

export type Violation = {
  sourcePath: string;
  range: Range;
  message: string;
  severity: Severity;
  code: string;
  link?: string;
};

export type Position = {
  line: number;
  column: number;
  offset: number;
};

export type Range = {
  start: Position;
  end: Position;
};

/** @deprecated Use {@link Scalar}. This type will be removed in a future version. */
export type Literal<T extends string | number | boolean | null> = {
  value: T;
  loc?: string;
};

export type Scalar<T extends string | number | boolean | null> = {
  value: T;
  loc?: string;
};

export type Primitive =
  | 'null'
  | 'string'
  | 'number'
  | 'integer'
  | 'long'
  | 'float'
  | 'double'
  | 'boolean'
  | 'date'
  | 'date-time'
  | 'untyped';

/**
 * Intermediate Representation (IR) of a service
 */
export type Service = {
  basketry: '1.1-rc';
  title: Scalar<string>;
  majorVersion: Scalar<number>;
  /** The path to the original source document for this service. All locations in the Intermediate Representation refer to ranges within this source document. */
  sourcePath: string;
  interfaces: Interface[];
  types: Type[];
  enums: Enum[];
  unions: Union[];
  loc: string;
  meta?: Meta;
};

export type Type = {
  name: Scalar<string>;
  description?: Scalar<string> | Scalar<string>[];
  properties: Property[];
  rules: ObjectValidationRule[];
  loc: string;
  meta?: Meta;
};

export type Enum = {
  name: Scalar<string>;
  values: Scalar<string>[];
  loc: string;
  meta?: Meta;
};

export type Union = {
  name: Scalar<string>;
  members: TypedValue[];
  loc: string;
  meta?: Meta;
};

export type PrimitiveValue = {
  typeName: Scalar<Primitive>;
  isArray: boolean;
  isPrimitive: true;
  rules: ValidationRule[];
};

export type CustomValue = {
  typeName: Scalar<string>;
  isArray: boolean;
  isPrimitive: false;
  rules: ValidationRule[];
};

export type TypedValue = PrimitiveValue | CustomValue;

export type Property = {
  name: Scalar<string>;
  description?: Scalar<string> | Scalar<string>[];
  loc: string;
  meta?: Meta;
} & TypedValue;

export type Interface = {
  name: string;
  description?: string;
  methods: Method[];
  protocols: {
    http: HttpPath[];
  };
  meta?: Meta;
};

export type HttpPath = {
  path: Scalar<string>;
  methods: HttpMethod[];
  loc: string;
  meta?: Meta;
};

export type HttpMethod = {
  name: Scalar<string>;
  verb: Scalar<
    'get' | 'post' | 'put' | 'patch' | 'delete' | 'head' | 'options' | 'trace'
  >;
  parameters: HttpParameter[];
  successCode: Scalar<number>;
  loc: string;
};

export type HttpParameter = {
  name: Scalar<string>;
  in: Scalar<'header' | 'query' | 'path' | 'formData' | 'body'>;
  array?: Scalar<'csv' | 'ssv' | 'tsv' | 'pipes' | 'multi'>;
  loc: string;
};

export type Method = {
  name: Scalar<string>;
  security: SecurityOption[];
  description?: Scalar<string> | Scalar<string>[];
  parameters: Parameter[];
  returnType: ReturnType | undefined;
  loc: string;
  meta?: Meta;
};

export type SecurityOption = SecurityScheme[];

export type SecurityScheme = BasicScheme | ApiKeyScheme | OAuth2Scheme;

export type BasicScheme = {
  type: Scalar<'basic'>;
  name: Scalar<string>;
  description?: Scalar<string>;
  loc: string;
  meta?: Meta;
};

export type ApiKeyScheme = {
  type: Scalar<'apiKey'>;
  name: Scalar<string>;
  description?: Scalar<string>;
  parameter: Scalar<string>;
  in: Scalar<'header' | 'query' | 'cookie'>;
  loc: string;
  meta?: Meta;
};

export type OAuth2Scheme = {
  type: Scalar<'oauth2'>;
  name: Scalar<string>;
  description?: Scalar<string>;
  flows: OAuth2Flow[];
  loc: string;
  meta?: Meta;
};

export type OAuth2Flow =
  | OAuth2ImplicitFlow
  | OAuth2PasswordFlow
  | OAuth2ClientCredentialsFlow
  | OAuth2AuthorizationCodeFlow;

export type OAuth2ImplicitFlow = {
  type: Scalar<'implicit'>;
  authorizationUrl: Scalar<string>;
  refreshUrl?: Scalar<string>;
  scopes: OAuth2Scope[];
  loc: string;
  meta?: Meta;
};

export type OAuth2PasswordFlow = {
  type: Scalar<'password'>;
  tokenUrl: Scalar<string>;
  refreshUrl?: Scalar<string>;
  scopes: OAuth2Scope[];
  loc: string;
  meta?: Meta;
};

export type OAuth2ClientCredentialsFlow = {
  type: Scalar<'clientCredentials'>;
  tokenUrl: Scalar<string>;
  refreshUrl?: Scalar<string>;
  scopes: OAuth2Scope[];
  loc: string;
  meta?: Meta;
};

export type OAuth2AuthorizationCodeFlow = {
  type: Scalar<'authorizationCode'>;
  authorizationUrl: Scalar<string>;
  tokenUrl: Scalar<string>;
  refreshUrl?: Scalar<string>;
  scopes: OAuth2Scope[];
  loc: string;
  meta?: Meta;
};

export type OAuth2Scope = {
  name: Scalar<string>;
  description: Scalar<string>;
  loc: string;
  meta?: Meta;
};

export type Parameter = {
  name: Scalar<string>;
  description?: Scalar<string> | Scalar<string>[];
  loc: string;
  meta?: Meta;
} & TypedValue;

export type ReturnType = {
  loc: string;
  meta?: Meta;
} & TypedValue;

export type Meta = MetaValue[];

export type MetaValue = {
  key: Scalar<string>;
  value: { value: any; loc?: string };
};

export type RequiredRule = {
  id: 'required';
};

export type StringMaxLengthRule = {
  id: 'string-max-length';
  length: Scalar<number>;
  loc: string;
};

export type StringMinLengthRule = {
  id: 'string-min-length';
  length: Scalar<number>;
  loc: string;
};

export type StringPatternRule = {
  id: 'string-pattern';
  pattern: Scalar<string>;
  loc: string;
};

export type StringFormatRule = {
  id: 'string-format';
  format: Scalar<string>;
  loc: string;
};

export type StringEnumRule = {
  id: 'string-enum';
  values: Scalar<string>[];
  loc: string;
};

export type NumberMultipleOfRule = {
  id: 'number-multiple-of';
  value: Scalar<number>;
  loc: string;
};

export type NumberGtRule = {
  id: 'number-gt';
  value: Scalar<number>;
  loc: string;
};

export type NumberGteRule = {
  id: 'number-gte';
  value: Scalar<number>;
  loc: string;
};

export type NumberLtRule = {
  id: 'number-lt';
  value: Scalar<number>;
  loc: string;
};

export type NumberLteRule = {
  id: 'number-lte';
  value: Scalar<number>;
  loc: string;
};

export type ArrayMaxItemsRule = {
  id: 'array-max-items';
  max: Scalar<number>;
  loc: string;
};

export type ArrayMinItemsRule = {
  id: 'array-min-items';
  min: Scalar<number>;
  loc: string;
};

export type ArrayUniqueItemsRule = {
  id: 'array-unique-items';
  required: boolean;
  loc: string;
};

export type ObjectMinPropertiesRule = {
  id: 'object-min-properties';
  min: Scalar<number>;
  loc: string;
};

export type ObjectMaxPropertiesRule = {
  id: 'object-max-properties';
  max: Scalar<number>;
  loc: string;
};

export type ObjectAdditionalPropertiesRule = {
  id: 'object-additional-properties';
  forbidden: true;
  loc: string;
};

export type ValidationRule =
  | RequiredRule
  | StringMaxLengthRule
  | StringMinLengthRule
  | StringPatternRule
  | StringFormatRule
  | StringEnumRule
  | NumberMultipleOfRule
  | NumberGtRule
  | NumberGteRule
  | NumberLtRule
  | NumberLteRule
  | ArrayMaxItemsRule
  | ArrayMinItemsRule
  | ArrayUniqueItemsRule;

export type ObjectValidationRule =
  | ObjectMinPropertiesRule
  | ObjectMaxPropertiesRule
  | ObjectAdditionalPropertiesRule;
