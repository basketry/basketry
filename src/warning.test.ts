import { Service } from './ir';
import { NamespacedBasketryOptions } from './types';
import { warning } from './warning';

describe('warning', () => {
  it('emits the package name and version', () => {
    // ARRANGE
    const service: Service = {
      kind: 'Service',
      basketry: '0.2',
      title: { kind: 'StringLiteral', value: 'Test Service' },
      majorVersion: { kind: 'IntegerLiteral', value: 1 },
      sourcePaths: ['#'],
      enums: [],
      interfaces: [],
      types: [],
      unions: [],
    };
    const pkg = {
      name: 'generator-name',
      version: '6.0.2',
      homepage: 'https://example.com/generator-homepage',
    };
    const options: NamespacedBasketryOptions | undefined = {};

    // ACT
    const result = Array.from(warning(service, pkg, options));

    // ASSERT
    expect(result).toEqual(
      expect.arrayContaining([
        'This code was generated by generator-name@6.0.2',
      ]),
    );
  });

  it('emits the Bakstery homepage', () => {
    // ARRANGE
    const service: Service = {
      kind: 'Service',
      basketry: '0.2',
      title: { kind: 'StringLiteral', value: 'Test Service' },
      majorVersion: { kind: 'IntegerLiteral', value: 1 },
      sourcePaths: ['#'],
      enums: [],
      interfaces: [],
      types: [],
      unions: [],
    };
    const pkg = {
      name: 'generator-name',
      version: '6.0.2',
    };

    // ACT
    const result = Array.from(warning(service, pkg));

    // ASSERT
    expect(result).toEqual(
      expect.arrayContaining(['About Basketry: https://basketry.io']),
    );
  });

  describe('run command', () => {
    it('emits the run command if provided', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };
      const options: NamespacedBasketryOptions | undefined = {
        basketry: { command: 'basketry run command' },
      };
      // ACT
      const result = Array.from(warning(service, pkg, options));

      // ASSERT
      expect(options.basketry?.command).toBeDefined();
      expect(result).toEqual(
        expect.arrayContaining(['2. Run `basketry run command`']),
      );
    });

    it('emits the default run command if not provided', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };
      const options: NamespacedBasketryOptions | undefined = {};

      // ACT
      const result = Array.from(warning(service, pkg, options));

      // ASSERT
      expect(options.basketry?.command).toBeUndefined();
      expect(result).toEqual(
        expect.arrayContaining(['2. Run the Basketry CLI']),
      );
    });

    it('emits the default run command if no options are provided', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };

      // ACT
      const result = Array.from(warning(service, pkg));

      // ASSERT
      expect(result).toEqual(
        expect.arrayContaining(['2. Run the Basketry CLI']),
      );
    });

    it('emits the default run command if not provided but other basketry options are', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };
      const options: NamespacedBasketryOptions | undefined = {
        basketry: { docs: 'https://example.com/docs' },
      };

      // ACT
      const result = Array.from(warning(service, pkg, options));

      // ASSERT
      expect(options.basketry?.command).toBeUndefined();
      expect(result).toEqual(
        expect.arrayContaining(['2. Run the Basketry CLI']),
      );
    });
  });

  describe('homepage', () => {
    it('emits the homepage if provided (for non-basketry package)', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
        homepage: 'https://example.com/generator-homepage',
      };
      // ACT
      const result = Array.from(warning(service, pkg));

      // ASSERT
      expect(result).toEqual(
        expect.arrayContaining([
          'About generator-name: https://example.com/generator-homepage',
        ]),
      );
    });

    it('does not emit a homepage if not provided', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };
      // ACT
      const result = Array.from(warning(service, pkg));

      // ASSERT
      expect(
        result.filter((line) => line.startsWith('About generator-name')),
      ).toEqual([]);
    });
  });

  describe('docs', () => {
    it('emits the docs URL if provided', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };
      const options: NamespacedBasketryOptions | undefined = {
        basketry: { docs: 'https://example.com/docs' },
      };

      // ACT
      const result = Array.from(warning(service, pkg, options));

      // ASSERT
      expect(result).toEqual(
        expect.arrayContaining([
          'About Test Service: https://example.com/docs',
        ]),
      );
    });

    it('does not emit docs if not provided', () => {
      // ARRANGE
      const service: Service = {
        kind: 'Service',
        basketry: '0.2',
        title: { kind: 'StringLiteral', value: 'Test Service' },
        majorVersion: { kind: 'IntegerLiteral', value: 1 },
        sourcePaths: ['#'],
        enums: [],
        interfaces: [],
        types: [],
        unions: [],
      };
      const pkg = {
        name: 'generator-name',
        version: '6.0.2',
      };
      const options: NamespacedBasketryOptions | undefined = {};

      // ACT
      const result = Array.from(warning(service, pkg, options));

      // ASSERT
      expect(
        result.filter((line) => line.startsWith('About Test Service')),
      ).toEqual([]);
    });
  });
});
